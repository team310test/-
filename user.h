#ifndef INCLUDED_USER
#define INCLUDED_USER

//******************************************************************************
//
//
//      ユーザー（ユーティリティー）
//
//
//******************************************************************************

//------< インクルード >--------------------------------------------------------
#include <sstream>
#include <bitset>

//------< inline function >-----------------------------------------------------

//------------------------------------------------------
//  整数を2進数（16bit）のstringに変換する
//------------------------------------------------------
//  const int n     変換する整数
//------------------------------------------------------
//  戻り値：std::string     数値を2進数に変換したもの(string)
//------------------------------------------------------
inline std::string strBit16(const int n)
{
    std::stringstream ss;
    ss << static_cast<std::bitset<16>>(n);
    return ss.str();
}

#if 6
//******************************************************************************
// TODO:06 値を範囲内に収める関数（clamp関数）
//------------------------------------------------------------------------------
/*
課題）
    値を範囲内に収める関数を作成せよ

    関数名：clamp
    引数　：const float& v  入力する数値
　　　    ：const float& lo 最小値
  　　    ：const float& hi 最大値
    戻り値：const float&    範囲内に収まった数値
    
    assert関数でhiがlo以上であることを確認しておくこと
    インライン関数として使用するため、先頭に inline とつけること

    ※引数や戻り値はconst float&を使用する（c++では入力はconstをつけて参照渡しを使うべき。出力はポインタを使うべき）
    ※インライン関数などの用語はインターネットで検索して調べること

ヒント）
      こういう処理を行う際に、いちいちif文の分岐が発生するのは非効率だ
      if (v > hi) v = hi;     // ×

      c++ではこういった処理をシンプルに行えるmax関数とmin関数が用意されている
      v = (std::min)(v, hi);  // ○

      つまり次のような処理は、
      if (v > hi) v = hi;
      if (v < lo) v = lo;

      以下のように書ける
      v = (std::min)(v, hi);
      v = (std::max)(v, lo);

      さらに次のように書ける
      v = (std::max)((std::min)(v, hi), lo);

      この機能を持つclamp関数を作成せよ

解説）
      本来、std::minやstd::maxという関数なのだが、WINDOWSのminマクロ、maxマクロの存在
      のせいで、そのままでは使えなくなっている状態である。回避方法はいくつかあるが、ここ
      では関数名を丸カッコで囲み min( や max( というつながりを避ける事で回避する。

      つまり(std::min)や(std::max)のように、関数名を丸カッコで囲めば大丈夫なのである。
      （現時点での解決法。）
*/
//******************************************************************************
#endif
//TODO_06 clamp関数
inline const float& clanp(
const float& v   //入力する値
,const float& lo //最大値
,const float& hi //最小値
) {
    return (std::min)((std::max)(v, hi), lo);
}

#endif // !INCLUDED_USER
